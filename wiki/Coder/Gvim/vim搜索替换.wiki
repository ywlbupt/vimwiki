== 行内搜索。 ==

* f命令可以进行行内搜索。输入fx可以找到下一个x字符。
* F命令可以在反方向进行行内搜索，输入Fx可以找到上一个x字符。
* t命令同样是进行行内搜索，但是光标停留在符合条件的字符的前面。输入tx使光标停留在下一个x字符的前面。
* T命令可以在反方向进行行内搜索，但是光标停留在符合条件的字符的下一个字符上。输入tx使光标停留在上一个x的后面的字符上。
* %可以搜索与之匹配的对应的()[]{}。这个功能对于书写程序特别有用。

== 全文搜索 ==

* 查找当前词。一个简单的方法可以让你查找下一个和当前词一样的词，你不比输入/currentword，你可以直接按下*就可以查找下一个currentword。#可以让你向上查找同一个单词。

* 调整查找后的光标位置。
	- 使用/string/3会使在光标转到找到string字符串的行下面的第3行。第1行从包含string的行算起。同样可以使用/string/-2来使光标停留在包含string的行的前面2行。
	- 使用/string/e可以使光标停留在string字符串的末尾而不是默认的第一个字符位置。/string/b则表示停留在string第一个字符的位置，不过默认就是如此，我们不比多此一举。但是/string/b+2却可以使光标停留在string字符串的第二个字符的位置，这里是r。在e或者b的后面+或者-数字，可以进一步调整光标的位置。
	- 特殊字符。在搜索命令中，  .*[]^%/?~$这10个字符有着特殊意义，所以在使用这些字符的时候要在前面加上一个反斜杠/。而\e表示<esc>；\t表示<tab>；\r表示<cr>；\b表示<bs>。
	- 匹配任何一个字符。句号.可以匹配任何一个字符。例如/t.e可以找到the或者tae或者tue。
	- 更加复杂的匹配模式。实际上，/搜索可以使用非常复杂的匹配模式。下面列出了其中一些复杂的匹配模式。
		- 可重复的字符。
			- 使用*表示它前面的字符可以重复多次或者0次。比如/be*可以匹配b,be,bee,beee等等。但是这也会包含b，因为e重复0后是空。如果要匹配诸如be,bebe,bebebe的字符串可以使用\(和\)把他们包括起来，形如：/\(be\)*。
			- 使用\+来限定为重复至少一次到无数次。如：/be\+可以匹配be,bee,bee等等。
			- 重复0次或者一次。\=可以指定重复0次或者一次。/strings\=表示匹配string或者strings。这在查找单词的复数形式特别有用.
			- 指定重复的次数。\{n,m}可以指定重复n到m次。比如：/be\{2,4}将会匹配bee,beee,beeee。同样可以使用\{,4}表示匹配0到4次；\{4,}表示4次到无数次；\{4}表示重复4次。
		- 匹配列表中的一个。使用一个以\|分割的列表，可以表示匹配列表中任何一项。比如/one\|two表示查找one或者two；/one\|two\|three表示查找one或者two或者three。
			- 一个复杂的实例：/end\(if\|while\|for\)将会查找endif，endwhile以及endfor。
			- 字符列表。使用[0-9]可以表示一个0到9范围的字符。比如/string[1-5]表示查找string1,string2,string3,string4,string5。当然也可以使用[a-z]表示字符a到z中间的一个。
			- 特殊的字符集合。使用\d也可以表示0到9的数字，这个选项可以代替[0-9]。\D表示非数字代替[^0-9]；\x表示十六进制数代替[0-9a-fA-F]；\X表示非十六进制数代替[^0-9a-fA-F]；\s表示空白字符代替[ ] (<Tab> 和<Space>)；\S表示非空白字符代替[^ ] (除<Tab> 和<Space>之外)；\l表示小写字母代替[a-z]；\L表示非小写字母代替[^a-z]；\u表示大写字母代替[A-Z]；\U表示非大写字母代替[^A-Z]

== 搜索并替换。 ==

* 输入:[range]s/from/to/[flags]命令可以搜索匹配的字符串并且替换为指定的字符串。这是一个稍微复杂的命令。其中[range]是一个可选项，用来指定搜索替换的范围。[flags]也是一个可选项，用来指定搜索替换的处理方式。所以这个命令的简单形式是:s/from/to/。
	- 搜索替换的范围。如果没有指定范围，则只在当前行进行搜索替换。
	- 在所有行进行搜索替换。范围符号%表示在所有行进行搜索替换。:%s/from/to/就是在全文查找from并替换为to。
	- 在指定的行上进行搜索替换。:1,50s/from/to/表示在第1行和第50行之间（包括1和50行）进行搜索和替换。:45s/from/to/表示仅仅在第45行进行搜索和替换。而"1,$"行号范围和“%“是等价的。
* 处理方式。我现在使用的VIM默认的方式是无须确认。不过好像不同版本的默认的处理方式是不同的。
	- 无须确认。方式符号g表示直接替换无须进行确认。:%s/from/to/g表示在全文中查找from并且直接全部替换为to。

== '>  `> ==			

到上次当前缓冲区选择的可视区域末行或最后一个字符。对于列块模式而言，可能也是末行的第一个字符 (为了能定义列块)。注意 这里适用 'selection'，该位置可能是刚刚在可视区域之后的位置。 {Vi 无此功能}
aa
